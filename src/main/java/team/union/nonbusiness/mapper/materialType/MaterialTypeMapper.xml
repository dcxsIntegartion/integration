<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.union.nonbusiness.materialType.dao.MaterialTypeDao">
	<resultMap id="BaseResultMap"
		type="team.union.nonbusiness.materialType.model.MaterialType">
		<id column="material_type_id" jdbcType="BIGINT" property="materialTypeId" />
		<result column="material_type" jdbcType="INTEGER" property="materialType" />
		<result column="material_num" jdbcType="VARCHAR" property="materialNum" />
		<result column="material_name" jdbcType="VARCHAR" property="materialName" />
		<result column="material_state" jdbcType="INTEGER" property="materialState" />
		<result column="superior_material_id" jdbcType="BIGINT"
			property="superiorMaterialId" />
		<result column="work_procedure_id" jdbcType="BIGINT" property="workProcedureId" />
		<result column="level" jdbcType="INTEGER" property="level" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		material_type_id, material_type, material_num,
		material_name, material_state,
		superior_material_id,
		work_procedure_id,
		level
	</sql>
	<select id="selectByExample"
		parameterType="team.union.nonbusiness.materialType.model.MaterialTypeExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from nonbis_material_type
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from nonbis_material_type
		where material_type_id =
		#{materialTypeId,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from
		nonbis_material_type
		where material_type_id =
		#{materialTypeId,jdbcType=BIGINT}
	</delete>
	<delete id="deleteByExample"
		parameterType="team.union.nonbusiness.materialType.model.MaterialTypeExample">
		delete from nonbis_material_type
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="team.union.nonbusiness.materialType.model.MaterialType">
		insert into nonbis_material_type
		(material_type_id, material_type, material_num,
		material_name,
		material_state, superior_material_id,
		work_procedure_id, level)
		values
		(#{materialTypeId,jdbcType=BIGINT}, #{materialType,jdbcType=INTEGER},
		#{materialNum,jdbcType=VARCHAR},
		#{materialName,jdbcType=VARCHAR},
		#{materialState,jdbcType=INTEGER},
		#{superiorMaterialId,jdbcType=BIGINT},
		#{workProcedureId,jdbcType=BIGINT}, #{level,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="team.union.nonbusiness.materialType.model.MaterialType">
		insert into nonbis_material_type
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="materialTypeId != null">
				material_type_id,
			</if>
			<if test="materialType != null">
				material_type,
			</if>
			<if test="materialNum != null">
				material_num,
			</if>
			<if test="materialName != null">
				material_name,
			</if>
			<if test="materialState != null">
				material_state,
			</if>
			<if test="superiorMaterialId != null">
				superior_material_id,
			</if>
			<if test="workProcedureId != null">
				work_procedure_id,
			</if>
			<if test="level != null">
				level,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="materialTypeId != null">
				#{materialTypeId,jdbcType=BIGINT},
			</if>
			<if test="materialType != null">
				#{materialType,jdbcType=INTEGER},
			</if>
			<if test="materialNum != null">
				#{materialNum,jdbcType=VARCHAR},
			</if>
			<if test="materialName != null">
				#{materialName,jdbcType=VARCHAR},
			</if>
			<if test="materialState != null">
				#{materialState,jdbcType=INTEGER},
			</if>
			<if test="superiorMaterialId != null">
				#{superiorMaterialId,jdbcType=BIGINT},
			</if>
			<if test="workProcedureId != null">
				#{workProcedureId,jdbcType=BIGINT},
			</if>
			<if test="level != null">
				#{level,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="team.union.nonbusiness.materialType.model.MaterialTypeExample"
		resultType="java.lang.Integer">
		select count(*) from nonbis_material_type
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update nonbis_material_type
		<set>
			<if test="record.materialTypeId != null">
				material_type_id =
				#{record.materialTypeId,jdbcType=BIGINT},
			</if>
			<if test="record.materialType != null">
				material_type = #{record.materialType,jdbcType=INTEGER},
			</if>
			<if test="record.materialNum != null">
				material_num = #{record.materialNum,jdbcType=VARCHAR},
			</if>
			<if test="record.materialName != null">
				material_name = #{record.materialName,jdbcType=VARCHAR},
			</if>
			<if test="record.materialState != null">
				material_state =
				#{record.materialState,jdbcType=INTEGER},
			</if>
			<if test="record.superiorMaterialId != null">
				superior_material_id =
				#{record.superiorMaterialId,jdbcType=BIGINT},
			</if>
			<if test="record.workProcedureId != null">
				work_procedure_id =
				#{record.workProcedureId,jdbcType=BIGINT},
			</if>
			<if test="record.level != null">
				level = #{record.level,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update nonbis_material_type
		set material_type_id =
		#{record.materialTypeId,jdbcType=BIGINT},
		material_type =
		#{record.materialType,jdbcType=INTEGER},
		material_num =
		#{record.materialNum,jdbcType=VARCHAR},
		material_name =
		#{record.materialName,jdbcType=VARCHAR},
		material_state =
		#{record.materialState,jdbcType=INTEGER},
		superior_material_id =
		#{record.superiorMaterialId,jdbcType=BIGINT},
		work_procedure_id =
		#{record.workProcedureId,jdbcType=BIGINT},
		level =
		#{record.level,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="team.union.nonbusiness.materialType.model.MaterialType">
		update nonbis_material_type
		<set>
			<if test="materialType != null">
				material_type = #{materialType,jdbcType=INTEGER},
			</if>
			<if test="materialNum != null">
				material_num = #{materialNum,jdbcType=VARCHAR},
			</if>
			<if test="materialName != null">
				material_name = #{materialName,jdbcType=VARCHAR},
			</if>
			<if test="materialState != null">
				material_state = #{materialState,jdbcType=INTEGER},
			</if>
			<if test="superiorMaterialId != null">
				superior_material_id =
				#{superiorMaterialId,jdbcType=BIGINT},
			</if>
			<if test="workProcedureId != null">
				work_procedure_id = #{workProcedureId,jdbcType=BIGINT},
			</if>
			<if test="level != null">
				level = #{level,jdbcType=INTEGER},
			</if>
		</set>
		where material_type_id = #{materialTypeId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="team.union.nonbusiness.materialType.model.MaterialType">
		update
		nonbis_material_type
		set material_type = #{materialType,jdbcType=INTEGER},
		material_num = #{materialNum,jdbcType=VARCHAR},
		material_name =
		#{materialName,jdbcType=VARCHAR},
		material_state =
		#{materialState,jdbcType=INTEGER},
		superior_material_id =
		#{superiorMaterialId,jdbcType=BIGINT},
		work_procedure_id =
		#{workProcedureId,jdbcType=BIGINT},
		level = #{level,jdbcType=INTEGER}
		where material_type_id = #{materialTypeId,jdbcType=BIGINT}
	</update>
	<select id="findAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from nonbis_material_type order by material_num
	</select>
	<select id="findAllImportantAndUsing" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		FROM
		nonbis_material_type mt
		WHERE
		NOT EXISTS (
		SELECT
		material_type_id
		FROM
		nonbis_material_type t
		WHERE
		t. LEVEL = 3
		AND (
		t.material_type != 1
		OR t.material_state != 1
		)
		AND t.material_type_id = mt.material_type_id
		)
		ORDER BY
		material_num
	</select>
	<select id="getMaxChildNum" parameterType="hashmap" resultType="String">
		select MAX(mt.material_num) from nonbis_material_type mt where
		<if test="pid != null">
			mt.superior_material_id = #{pid,jdbcType=BIGINT}
		</if>
		<if test="pid == null">
			mt.superior_material_id IS NULL
		</if>
		and mt.`level`= #{level, jdbcType=INTEGER}
	</select>
	<select id="list" parameterType="hashmap" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from nonbis_material_type mt
		<where>
			<if test="workProcedureId != null">
				mt.work_procedure_id = #{workProcedureId,
				jdbcType=BIGINT}
			</if>
		</where>
		order by mt.material_num
	</select>
	<update id="updateWorkProcedureIdById" parameterType="hashmap">
		update nonbis_material_type mt
		set work_procedure_id = #{workProcedureId,
		jdbcType=INTEGER}
		where material_type_id in
		<foreach item="item" index="index" collection="ids" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</update>
	<select id="getMaxWorkProcedureId" resultType="Long">
		select
		IFNULL(MAX(mt.work_procedure_id),0) from nonbis_material_type mt
	</select>
</mapper>